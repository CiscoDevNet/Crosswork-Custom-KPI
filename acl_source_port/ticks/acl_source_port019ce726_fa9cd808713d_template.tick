//-----------------------------------------------------------------------------
// {{ script_id.value }} - Pulse TICKscript Template
//
// Master template: two_level_rate_threshold-master-template
//
// Description: This alert template detects abnormal rates of change in
// measured values to detect rising or falling values.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store a
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME Producer name or regex for producer names
var uuid string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'acl_source_port019ce726_fa9cd808713d'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'acl_source_port019ce726_fa9cd808713d'

//KPI_INTERNAL Alert message format string
var alert_message = '{{ .Level }} : Data rate: {{ index .Fields "data_rate" | printf "%0.2f" }} % is Unusual, Threshold: {{ index .Fields "alert_threshold" | printf "%0.2f" }}.'

//KPI_INTERNAL Clear message format string
var clear_message = '{{ .Level }} : data rate {{ index .Fields "data_rate" | printf "%0.2f" }} % has returned to Usual range, Threshold: {{ index .Fields "clear_threshold" | printf "%0.2f" }}.'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'Cisco-IOS-XR-ipv4-acl-oper:ipv4-acl-and-prefix-list/access-list-manager/accesses/access/access-list-sequences/access-list-sequence'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: TRUE

// KPI_INTERNAL filter var to filter data only related to producer(s)
var where_producer = lambda: TRUE

//KPI_INTERNAL Optional list of group by dimensions
var groups = [*]

//KPI_INTERNAL Lambda expression to reduce raw data to KPI
var stream_eval_lambda = lambda: float("source-port1")+float("source-port2")

//KPI_THRESHOLDS (Alert Threshold) Value that rate must be equal or greater than to enter alert state
var alert_threshold = 1.00

//KPI_THRESHOLDS (Alert Critical Time) Time that needs to pass after entering the alert state to generate a CRIT alert (default 0 seconds)
var alert_crit_time = 0.00

//KPI_THRESHOLDS (Alert Warning Time) Time that needs to pass after entering the alert state to generate a WARN alert (default 0 seconds)
var alert_warn_time = 0.00

//KPI_THRESHOLDS (Clear Threshold) Threshold that this value must fall below to enter the clear state
var clear_threshold = 2.00

//KPI_THRESHOLDS (Clear Time) Time that needs to pass after entering the clear state to generate a CLEAR alert  (default 0 seconds)
var clear_time = 0.00

//KPI_INTERNAL Unit of time for alert alerts
var time_unit = 1s

//KPI_INTERNAL Unit of time for rate calculation
var derivative_time_unit = 1m


var data = stream
    |from()
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()

var transform = data
    |eval(stream_eval_lambda)             //evaluation/reduction of stream data done here
                .as('stream_eval_result') //internal field reference
                .quiet()

var rate = transform      //renamed deriv_branch -> rate
    |derivative('stream_eval_result')
                .unit(derivative_time_unit)
                .as('data_rate')
                .quiet()
    |stateDuration(lambda: "data_rate" >= alert_threshold)
                .unit(time_unit)
                .as('alert_duration')
    |stateDuration(lambda: "data_rate" < clear_threshold)
                    .unit(time_unit)
                    .as('clear_duration')

    |default() //insert the thresholds into the data stream
        .field('alert_threshold', alert_threshold)
        .field('clear_threshold', clear_threshold)
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')

rate
    |alert()
         // Warn after input time
         .warn(lambda: "alert_duration" >= alert_warn_time)
         // Critical after input time
         .crit(lambda: "alert_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out
    |influxDBOut()
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

rate
    |alert()
         //info on clear after input time
         .info(lambda: "clear_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out
    |influxDBOut()
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
